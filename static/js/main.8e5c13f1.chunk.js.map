{"version":3,"sources":["contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","localData","localStorage","getItem","JSON","parse","books","setBooks","useEffect","setItem","stringify","Provider","value","addBook","title","author","id","uuid","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","NewBookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAGaA,EAAcC,0BAuBZC,EArBa,SAACC,GAAW,IAAD,EACTC,oBAAS,WAC/B,IAAMC,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHZ,mBAC5BK,EAD4B,KACrBC,EADqB,KAKnCC,qBAAU,WACNN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC9C,CAACA,IAOJ,OACI,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAACN,QAAOO,QAPzB,SAACC,EAAOC,GACpBR,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAACQ,QAAOC,SAAQC,GAAIC,WAMMC,WAJ/B,SAACF,GAChBT,EAASD,EAAMa,QAAO,SAAAC,GAAI,OAAIA,EAAKJ,KAAOA,SAIrCjB,EAAMsB,WCRJC,EAVA,WAAO,IACVhB,EAAUiB,qBAAW3B,GAArBU,MACR,OACI,yBAAKkB,UAAU,UACX,kDACA,iDAAuBlB,EAAMmB,OAA7B,+BCKGC,EAVK,SAAC,GAAc,IAAZN,EAAW,EAAXA,KACZF,EAAcK,qBAAW3B,GAAzBsB,WACP,OACI,wBAAIS,QAAS,kBAAMT,EAAWE,EAAKJ,MAC/B,yBAAKQ,UAAU,SAAWJ,EAAKN,OAC/B,yBAAKU,UAAU,UAAWJ,EAAKL,UCW5Ba,EAfE,WAAO,IACZtB,EAAUiB,qBAAW3B,GAArBU,MACR,OAAOA,EAAMmB,OACT,yBAAKD,UAAU,aACX,4BACKlB,EAAMuB,KAAI,SAAAvB,GACP,OAAO,kBAAC,EAAD,CAAac,KAAMd,EAAOwB,IAAKxB,EAAMU,UAKxD,yBAAKQ,UAAU,SAAf,gDCSOO,EArBK,WAAO,IACflB,EAAYU,qBAAW3B,GAAvBiB,QADc,EAEIb,mBAAS,IAFb,mBAEfc,EAFe,KAERkB,EAFQ,OAGMhC,mBAAS,IAHf,mBAGfe,EAHe,KAGPkB,EAHO,KAUtB,OACI,0BAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACFvB,EAAQC,EAAOC,GACfiB,EAAS,IACTC,EAAU,MAIN,2BAAOI,KAAK,OAAOC,YAAY,YAAY1B,MAAOE,EAClDyB,SAAU,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAO5B,QAAQ6B,UAAQ,IACnD,2BAAOJ,KAAK,OAAOC,YAAY,oBAAoB1B,MAAOG,EAC1DwB,SAAU,SAACJ,GAAD,OAAOF,EAAUE,EAAEK,OAAO5B,QAAQ6B,UAAQ,IACpD,2BAAOJ,KAAK,SAASzB,MAAM,eCDxB8B,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e5c13f1.chunk.js","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport uuid from 'uuid/dist/v1';\r\n\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = (props) => {\r\n    const [books, setBooks] = useState(() => {\r\n        const localData = localStorage.getItem('books');\r\n        return localData ? JSON.parse(localData) : []\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem('books', JSON.stringify(books))\r\n    }, [books])\r\n    const addBook = (title, author) => {\r\n        setBooks([...books, {title, author, id: uuid() }]);\r\n    };\r\n    const removeBook = (id) => {\r\n        setBooks(books.filter(book => book.id !== id));\r\n    };\r\n    return(\r\n        <BookContext.Provider value={{books, addBook, removeBook}}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BookContextProvider","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n    const { books } = useContext(BookContext);\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h1>Personal Cart List</h1>\r\n            <p>Currently You have {books.length} items to get through... </p>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst BookDetails = ({ book }) => {\r\n    const {removeBook} = useContext(BookContext);\r\n    return (\r\n        <li onClick={() => removeBook(book.id)}>\r\n            <div className=\"title\" >{ book.title }</div>\r\n            <div className=\"author\">{ book.author }</div>\r\n        </li>\r\n    );\r\n}\r\n \r\nexport default BookDetails;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookDetails from './BookDetails';\r\n\r\nconst BookList = () => {\r\n    const { books } = useContext(BookContext);\r\n    return books.length ? (\r\n        <div className=\"book-list\">\r\n            <ul>\r\n                {books.map(books => {\r\n                    return(<BookDetails book={books} key={books.id} />);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    ):(\r\n        <div className=\"empty\">Nothing to get through... Hello freetime :)</div>\r\n    );\r\n}\r\n \r\nexport default BookList;","import React, { useContext, useState } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst NewBookForm = () => {\r\n    const { addBook } = useContext(BookContext);\r\n    const [title, setTitle] = useState('');\r\n    const [author, setAuthor] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        addBook(title, author);\r\n        setTitle('');\r\n        setAuthor('');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Item name\" value={title}\r\n            onChange={(e) => setTitle(e.target.value)} required />\r\n            <input type=\"text\" placeholder=\"Where you can get\" value={author}\r\n            onChange={(e) => setAuthor(e.target.value)} required />\r\n            <input type=\"submit\" value=\"Add item\" />\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default NewBookForm;","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}